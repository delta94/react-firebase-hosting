{"version":3,"sources":["components/Navbar.js","components/Page1.js","components/Page2.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Navbar","_ref","page","react_default","a","createElement","layout","className","style","position","zIndex","width","menu","theme","mode","defaultSelectedKeys","lineHeight","Item","key","react_router_dom","to","Content","Page1","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","web3","components_Navbar","Component","Page2","Page2_Content","App","basename","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAKQA,SAAWC,IAAXD,QAyBOE,EAvBA,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAChB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACfJ,EAAAC,EAAAC,cAACP,EAAD,CAAQU,MAAO,CAAEC,SAAU,QAASC,OAAQ,EAAGC,MAAO,SACpDR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,aACLC,oBAAqB,CAACb,GACtBM,MAAO,CAAEQ,WAAY,SAErBb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,KAAN,CAAWC,IAAI,KACbf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,MAAT,WAEFjB,EAAAC,EAAAC,cAACO,EAAA,EAAKK,KAAN,CAAWC,IAAI,KACbf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,WAAT,eCjBJC,EAAYtB,IAAZsB,QA4BOC,cAzBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,KAAMT,EAAMS,MAJGR,wEASjB,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4B,EAAD,CAAQ/B,KAAM,MACdC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,mCAlBQ6B,aCFZb,EAAYtB,IAAZsB,QA2BOc,cAxBb,SAAAA,EAAYZ,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAQ,IACjBX,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAU,GAAAL,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,KAAMT,EAAMS,MAJGR,wEASjB,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4B,EAAD,CAAQ/B,KAAM,MACdC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kCAhBM6B,aCULG,MAXf,WACE,OACElC,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAYmB,SAAS,MACnBnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,KAAKC,UAAWpB,IAClCnB,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWP,OCCrBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.be4c6ab7.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport '../App.css';\n\nconst { Header } = Layout;\n\nconst Navbar = ({ page }) => {\n  return (\n    <Layout>\n      <div className='logo' />\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <Menu\n          theme='dark'\n          mode='horizontal'\n          defaultSelectedKeys={[page]}\n          style={{ lineHeight: '64px' }}\n        >\n          <Menu.Item key='1'>\n            <Link to='./'>Page1 </Link>\n          </Menu.Item>\n          <Menu.Item key='2'>\n            <Link to='./page2'>Page2 </Link>\n          </Menu.Item>\n        </Menu>\n      </Header>\n    </Layout>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport Navbar from './Navbar';\nimport '../App.css';\n\nconst { Content } = Layout;\n\nclass Page1 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      web3: props.web3\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar page={'1'} />\n        <div className='section'>\n          <Content>\n            <h1>\n              <strong>Page1</strong>\n            </h1>\n            <h2>Hello world</h2>\n          </Content>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Page1;\n","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport Navbar from './Navbar';\nimport '../App.css';\n\nconst { Content } = Layout;\n\nclass Page2 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      web3: props.web3\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar page={'2'} />\n        <div className='section'>\n          <Content>\n            <h1>\n              <strong>Page2</strong>\n            </h1>\n          </Content>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Page2;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Page1 from './components/Page1';\nimport Page2 from './components/Page2';\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter basename='./'>\n      <div className='App'>\n        <Route exact path='./' component={Page1} />\n        <Route path='./page2' component={Page2} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}